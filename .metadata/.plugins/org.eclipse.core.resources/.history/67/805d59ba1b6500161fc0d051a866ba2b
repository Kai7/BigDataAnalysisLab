package dataStructure.kdTree;

import java.util.List;
import java.util.Random;

import dataPattern.DataVector;

import functions.distanceFunction.DistanceEuclidean;
import functions.distanceFunction.DistanceFunction;

public class KDTree {
	private int countNode = 0;
	private KDNode root = null;
	private int countDimension = 0;

	private Random randomGen = new Random(System.currentTimeMillis());

	DistanceFunction disCalculator = new DistanceEuclidean();

	public KDTree() {

	}

	public int size() {
		return countNode;
	}

	public void buildTree(List<DataVector> dataVectors) {
		if (dataVectors.size() == 0) {
			return;
		}
		countDimension = dataVectors.get(0).size();

		root = generateNode(0, dataVectors, 0, dataVectors.size() - 1);
	}

	private KDNode generateNode(int currentD, List<DataVector> dataVectors, int start, int end) {
		if (start > end) {
			return null;
		}

		countNode++;
		if (start == end) {
			return new KDNode(dataVectors.get(start), currentD);
		}

		int mid = (end - start + 1) / 2;
		DataVector midDataVector = randomizeSelect(dataVectors, mid, start, end, currentD);
		KDNode genKDNode = new KDNode(midDataVector, currentD);
		currentD++;
		if (currentD == countDimension) {
			currentD = 0;
		}

		genKDNode.left = generateNode(currentD, dataVectors, start, start + mid - 1);
		genKDNode.right = generateNode(currentD, dataVectors, start + mid + 1, end);

		return genKDNode;
	}

	private DataVector randomizeSelect(List<DataVector> dataVectors, int rank, int start, int end, int currentD) {
		while(true){
			if(start == end){
				return dataVectors.get(start);
			}
		}
	}
	
	private int randomizePartition(List<DataVector> dataVectors, int start, int end, int currentD){
		int i = randomGen.nextInt(end-start);
		spaw(dataVectors, i, end);
		
		int f=start-1;
		int r = start;
		while(true){
			
		}
	}
	
	private void spaw(List<DataVector> dataVectors, int ii, int jj){
		DataVector tmpDataVector = dataVectors.get(ii);
		dataVectors.set(ii, dataVectors.get(jj));
		dataVectors.set(jj, tmpDataVector);
	}
}

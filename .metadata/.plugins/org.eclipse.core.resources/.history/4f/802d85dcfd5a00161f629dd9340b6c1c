import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class ARMining {

	/**
	 * @param args
	 */
	private static double MINSUP_RATIO = 0.005;

	// private static int MINSUP = 10;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		KaiSeven.FPGrowth FPGMiner;
		String inDataPath = "";
		String outDataPath = "";
		double minsup_ratio = 0.0;

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		if (args.length == 0) {
			String currentPath = "";
			try {
				currentPath = new java.io.File(".").getCanonicalPath();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("Error : Can't get current working directory !");
				System.exit(0);
			}

			System.out.println("No arguments, you can use the command : ");
			System.out.println("\tjava -jar ARMining [DataSet] [MinSup_Ratio] ");
			System.out.println("to config your input data and minimal support.");
			System.out.println("+Input+++++++++++++++++++++++++++++++++++++++++++++++");
			System.out.println(" 1) Simple");
			System.out.println(" 2) D1kT10N500.txt");
			System.out.println(" 3) D10kT10N1k.txt");
			System.out.println(" 4) D100kT10N1k.txt");
			System.out.println(" 5) Mushroom.txt");
			System.out.print("choose a dataset file (1-5 or 0 to exit) : ");
			int numFile = -1;
			try {
				numFile = Integer.parseInt(br.readLine());
			} catch (NumberFormatException | IOException e) {
				e.printStackTrace();
				System.exit(0);
			}
			switch (numFile) {
			case 0:
				System.exit(0);
			case 1:
				inDataPath = currentPath + "/ARMiningDataSet/Simple.txt";
				outDataPath = inDataPath + ".result";
				break;
			case 2:
				inDataPath = currentPath + "/ARMiningDataSet/D1kT10N500.txt";
				outDataPath = inDataPath + ".result";
				break;
			case 3:
				inDataPath = currentPath + "/ARMiningDataSet/D10kT10N1k.txt";
				outDataPath = inDataPath + ".result";
				break;
			case 4:
				inDataPath = currentPath + "/ARMiningDataSet/D100kT10N1k.txt";
				outDataPath = inDataPath + ".result";
				break;
			case 5:
				inDataPath = currentPath + "/ARMiningDataSet/Mushroom.txt";
				outDataPath = inDataPath + ".result";
				break;
			default:
				System.out.println("Unknown file ! (please choose 1-5)");
				System.exit(0);
			}

			System.out.print("input a minimal support in (0,1): ");
			try {
				minsup_ratio = Double.parseDouble(br.readLine());
			} catch (NumberFormatException | IOException e) {
				e.printStackTrace();
				System.exit(0);
			}
			if (!isSuitableSupport(minsup_ratio)) {
				System.out.print("support is not suitable.");
				System.exit(0);
			}
		} else if (args.length == 2) {
			inDataPath = args[0];
			outDataPath = inDataPath + ".result";
			minsup_ratio = Double.parseDouble(args[1]);
			if (!isSuitableSupport(minsup_ratio)) {
				System.out.print("support is not suitable.");
				System.exit(0);
			}
		} else {
			System.out.println("Unknows arguments");
			System.out.println("Example : java -jar ARMining [DataSet] [MinSup_Ratio]");
			System.exit(0);
		}
		
		System.out.println("+Algorithm+++++++++++++++++++++++++++++++++++++++++++");
		System.out.println(" 1) Apriori");
		System.out.println(" 2) FPGrowth");
		System.out.println(" 3) both two");
		System.out.print("Choose a method (1-3) : ");
		br = new BufferedReader(new InputStreamReader(System.in));
		int numAlgo = -1;
		try {
			numAlgo = Integer.parseInt(br.readLine());
		} catch (NumberFormatException | IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
		try {
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
		switch (numAlgo) {
		case 1:
			System.out.println("this version has no Apriori.");
			// AprioriMethod(inDataPath, outDataPath, minsup_ratio);
			break;
		case 2:
			FPGMiner = new KaiSeven.FPGrowth(inDataPath, outDataPath, minsup_ratio);
			break;
		case 3:
			// AprioriMethod(inDataPath, outDataPath, minsup_ratio);
			FPGMiner = new KaiSeven.FPGrowth(inDataPath, outDataPath, minsup_ratio);
			break;
		default:
			System.out.println("Unknown algorithm ! (please choose 1-3)");
			System.exit(0);
		}

		// String inDataPath =
		// "/home/kaichi/Programming/BigDataAnalysisLab/AssociationRuleMining/Simple.txt";
//		inDataPath = "/home/kaichi/Documents/BDALab/Association Rule Mining/Dataset/D1kT10N500.txt";
		// String inDataPath =
		// "/home/kaichi/Documents/BDALab/Association Rule Mining/Dataset/D10kT10N1k.txt";

		// for (int i = 2; i >= 2; i--) {
		// // FPGrowthAlphaMethod(inDataPath, (double) i / 1000);
		// FPGrowthMethod(inDataPath, outDataPath, (double) i / 1000);
		// }
		// for (int i = 10; i >= 1; i--)
		// AprioriMethod(DataPath, (double) i / 1000);

	}

	private static boolean isSuitableSupport(double sup) {
		if (sup >= 1)
			return false;
		else if (sup <= 0)
			return false;
		else
			return true;
	}

	private static void AprioriMethod(String DataPath, double minsup_ratio) {
		KaiSeven.Apriori APMininer = new KaiSeven.Apriori(DataPath, minsup_ratio);
		APMininer.mining();
		// String MiningResult = APMininer.toString();
		String SimpleResult = APMininer.getSimpleResult();
		System.out.println(SimpleResult);
	}

	private static void FPGrowthAlphaMethod(String DataPath, double minsup_ratio) {
		FPGrowthAlpha FPGMiner = new FPGrowthAlpha(DataPath, minsup_ratio);
		FPGMiner.mining();
		String SimpleResult = FPGMiner.getSimpleResult();
		System.out.println(SimpleResult);
	}

	private static void FPGrowthMethod(String inDataPath, String outDataPath, double minsup_ratio) {
		KaiSeven.FPGrowth FPGMiner = new KaiSeven.FPGrowth(inDataPath, outDataPath, minsup_ratio);
	}
}

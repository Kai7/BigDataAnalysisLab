package ds;

import java.util.HashMap;
import java.util.HashSet;

public class DecisionTree {
	DecisionNode root;

	public DecisionTree() {
		root = null;
	}

	public void buildTree(String[][] cusInfo, String[] attrs, HashSet<Integer> numattrs, HashSet<Integer> disattrs, int targetIndex) {
		HashSet<Integer> subInfo = new HashSet<Integer>();
		for (int i = 0; i < cusInfo.length; i++) {
			subInfo.add(i);
		}

		root = detectDecisionAttr(cusInfo, subInfo, attrs, numattrs, disattrs, targetIndex);
	}

	public DecisionNode detectDecisionAttr(String[][] cusInfo, HashSet<Integer> subInfo, String[] attrs, HashSet<Integer> numattrs, HashSet<Integer> disattrs,
			int targetIndex) {
		DecisionNode result = null;
		HashMap<Integer, Double> mapInfo = new HashMap<Integer, Double>();
		for (int idxDisAttr : disattrs) {
			mapInfo.put(idxDisAttr, calculateInfo(cusInfo, subInfo, idxDisAttr, targetIndex));
		}

		return result;
	}

	private double calculateInfo(String[][] cusInfo, HashSet<Integer> subInfo, int detectIndex, int targetIndex) {

		return 0.0;
	}
}
